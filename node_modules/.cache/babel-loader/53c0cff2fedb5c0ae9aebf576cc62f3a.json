{"ast":null,"code":"import _slicedToArray from \"/Users/davit/Desktop/AAA/Z-D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport useSessionStorage from \"./useSessionStorage\";\nimport base64 from \"base-64\";\nimport Query from \"./query-builder\";\nimport { DOMAIN } from '../variables/general';\n\nvar useFetch = function useFetch(endpoint) {\n  var _useSessionStorage = useSessionStorage('userData'),\n      _useSessionStorage2 = _slicedToArray(_useSessionStorage, 1),\n      credentials = _useSessionStorage2[0];\n\n  var defaultHeader = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Basic \" + base64.encode(\"\".concat(credentials.login, \":\").concat(credentials.password))\n  };\n\n  var customFetch = function customFetch(url) {\n    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n    var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHeader;\n    var options = {\n      method,\n      headers\n    };\n    if (body) options.body = JSON.stringify(body);\n    return fetch(\"\".concat(DOMAIN, \"/\").concat(url), options).then(function (response) {\n      return response.json();\n    }).catch(function (err) {\n      // throw new Error(err);\n      return {\n        aa: ''\n      };\n    });\n  };\n\n  var get = function get(query) {\n    var url = \"\".concat(endpoint).concat(query ? \"\".concat(query) : \"\");\n    return customFetch(url);\n  };\n\n  var post = function post() {\n    var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!body) throw new Error(\"to make a post you must provide a     body\");\n    return customFetch(endpoint, \"POST\", body);\n  };\n\n  var put = function put() {\n    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!id || !body) throw new Error(\"to make a put you must provide the id and the   body\");\n    var url = \"\".concat(endpoint, \"/\").concat(id);\n    return customFetch(url, \"PUT\", body);\n  };\n\n  var del = function del() {\n    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!id) throw new Error(\"to make a delete you must provide the id and the body\");\n    var url = \"\".concat(endpoint, \"/\").concat(id);\n    return customFetch(url, \"DELETE\");\n  };\n\n  return {\n    get,\n    post,\n    put,\n    del\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/davit/Desktop/AAA/Z-D/src/core/useFetch.js"],"names":["useSessionStorage","base64","Query","DOMAIN","useFetch","endpoint","credentials","defaultHeader","Accept","Authorization","encode","login","password","customFetch","url","method","body","headers","options","JSON","stringify","fetch","then","response","json","catch","err","aa","get","query","post","Error","put","id","del"],"mappings":";AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,MAAT,QAAuB,sBAAvB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,QAAQ,EAAI;AAAA,2BACLL,iBAAiB,CAAC,UAAD,CADZ;AAAA;AAAA,MACpBM,WADoB;;AAE3B,MAAMC,aAAa,GAAG;AACpBC,IAAAA,MAAM,EAAE,kBADY;AAEpB,oBAAgB,kBAFI;AAGpBC,IAAAA,aAAa,EACX,WAAWR,MAAM,CAACS,MAAP,WAAiBJ,WAAW,CAACK,KAA7B,cAAsCL,WAAW,CAACM,QAAlD;AAJO,GAAtB;;AAMA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAClBC,GADkB,EAKf;AAAA,QAHHC,MAGG,uEAHM,KAGN;AAAA,QAFHC,IAEG,uEAFI,KAEJ;AAAA,QADHC,OACG,uEADOV,aACP;AACH,QAAMW,OAAO,GAAG;AACdH,MAAAA,MADc;AAEdE,MAAAA;AAFc,KAAhB;AAIA,QAAID,IAAJ,EAAUE,OAAO,CAACF,IAAR,GAAeG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAf;AACV,WAAOK,KAAK,WAAIlB,MAAJ,cAAcW,GAAd,GAAqBI,OAArB,CAAL,CACJI,IADI,CACC,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADT,EAEJC,KAFI,CAEE,UAAAC,GAAG,EAAI;AACZ;AACA,aAAO;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAP;AACD,KALI,CAAP;AAMD,GAjBD;;AAkBA,MAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,KAAK,EAAI;AACnB,QAAMf,GAAG,aAAMT,QAAN,SAAiBwB,KAAK,aAAMA,KAAN,IAAgB,EAAtC,CAAT;AACA,WAAOhB,WAAW,CAACC,GAAD,CAAlB;AACD,GAHD;;AAKA,MAAMgB,IAAI,GAAG,SAAPA,IAAO,GAAkB;AAAA,QAAjBd,IAAiB,uEAAV,KAAU;AAC7B,QAAI,CAACA,IAAL,EAAW,MAAM,IAAIe,KAAJ,CAAU,4CAAV,CAAN;AACX,WAAOlB,WAAW,CAACR,QAAD,EAAW,MAAX,EAAmBW,IAAnB,CAAlB;AACD,GAHD;;AAKA,MAAMgB,GAAG,GAAG,SAANA,GAAM,GAA8B;AAAA,QAA7BC,EAA6B,uEAAxB,KAAwB;AAAA,QAAjBjB,IAAiB,uEAAV,KAAU;AACxC,QAAI,CAACiB,EAAD,IAAO,CAACjB,IAAZ,EACE,MAAM,IAAIe,KAAJ,CAAU,sDAAV,CAAN;AACF,QAAMjB,GAAG,aAAMT,QAAN,cAAkB4B,EAAlB,CAAT;AACA,WAAOpB,WAAW,CAACC,GAAD,EAAM,KAAN,EAAaE,IAAb,CAAlB;AACD,GALD;;AAMA,MAAMkB,GAAG,GAAG,SAANA,GAAM,GAAgB;AAAA,QAAfD,EAAe,uEAAV,KAAU;AAC1B,QAAI,CAACA,EAAL,EACE,MAAM,IAAIF,KAAJ,CAAU,uDAAV,CAAN;AACF,QAAMjB,GAAG,aAAMT,QAAN,cAAkB4B,EAAlB,CAAT;AACA,WAAOpB,WAAW,CAACC,GAAD,EAAM,QAAN,CAAlB;AACD,GALD;;AAMA,SAAO;AACLc,IAAAA,GADK;AAELE,IAAAA,IAFK;AAGLE,IAAAA,GAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,CAtDD;;AAuDA,eAAe9B,QAAf","sourcesContent":["import useSessionStorage from \"./useSessionStorage\";\nimport base64 from \"base-64\";\nimport Query from \"./query-builder\";\nimport { DOMAIN } from '../variables/general';\n\nconst useFetch = endpoint => {\n  const [credentials] = useSessionStorage('userData');\n  const defaultHeader = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Authorization:\n      \"Basic \" + base64.encode(`${credentials.login}:${credentials.password}`),\n  };\n  const customFetch = (\n    url,\n    method = \"GET\",\n    body = false,\n    headers = defaultHeader\n  ) => {\n    const options = {\n      method,\n      headers\n    };\n    if (body) options.body = JSON.stringify(body);\n    return fetch(`${DOMAIN}/${url}`, options)\n      .then(response => response.json())\n      .catch(err => {\n        // throw new Error(err);\n        return {aa: ''}\n      });\n  };\n  const get = query => {\n    const url = `${endpoint}${query ? `${query}` : \"\"}`;\n    return customFetch(url);\n  };\n  \n  const post = (body = false) => {\n    if (!body) throw new Error(\"to make a post you must provide a     body\");\n    return customFetch(endpoint, \"POST\", body);\n  };\n\n  const put = (id = false, body = false) => {\n    if (!id || !body)\n      throw new Error(\"to make a put you must provide the id and the   body\");\n    const url = `${endpoint}/${id}`;\n    return customFetch(url, \"PUT\", body);\n  };\n  const del = (id = false) => {\n    if (!id)\n      throw new Error(\"to make a delete you must provide the id and the body\");\n    const url = `${endpoint}/${id}`;\n    return customFetch(url, \"DELETE\");\n  };\n  return {\n    get,\n    post,\n    put,\n    del\n  };\n};\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}