{"ast":null,"code":"import _classCallCheck from \"/Users/davit/Desktop/AAA/Z-D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/davit/Desktop/AAA/Z-D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/davit/Desktop/AAA/Z-D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/davit/Desktop/AAA/Z-D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/davit/Desktop/AAA/Z-D/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/davit/Desktop/AAA/Z-D/src/views/Calendar.js\";\n\n/*!\n\n=========================================================\n* Black Dashboard PRO React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/black-dashboard-pro-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\"; // react component used to create a calendar with events on it\n\nimport { Calendar as BigCalendar, momentLocalizer } from \"react-big-calendar\"; // dependency plugin for react-big-calendar\n\nimport moment from \"moment\"; // react component used to create alerts\n\nimport SweetAlert from \"react-bootstrap-sweetalert\"; // reactstrap components\n\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\nimport { events } from \"variables/general.js\";\nvar localizer = momentLocalizer(moment);\n\nvar Calendar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  var _super = _createSuper(Calendar);\n\n  function Calendar(props) {\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    _this = _super.call(this, props);\n\n    _this.selectedEvent = function (event) {\n      alert(event.title);\n    };\n\n    _this.addNewEventAlert = function (slotInfo) {\n      _this.setState({\n        alert: /*#__PURE__*/React.createElement(SweetAlert, {\n          input: true,\n          showCancel: true,\n          style: {\n            display: \"block\",\n            marginTop: \"-100px\"\n          },\n          title: \"Input something\",\n          onConfirm: function onConfirm(e) {\n            return _this.addNewEvent(e, slotInfo);\n          },\n          onCancel: function onCancel() {\n            return _this.hideAlert();\n          },\n          confirmBtnBsStyle: \"info\",\n          cancelBtnBsStyle: \"danger\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 9\n          }\n        })\n      });\n    };\n\n    _this.addNewEvent = function (e, slotInfo) {\n      var newEvents = _this.state.events;\n      newEvents.push({\n        title: e,\n        start: slotInfo.start,\n        end: slotInfo.end\n      });\n\n      _this.setState({\n        alert: null,\n        events: newEvents\n      });\n    };\n\n    _this.hideAlert = function () {\n      _this.setState({\n        alert: null\n      });\n    };\n\n    _this.eventColors = function (event, start, end, isSelected) {\n      var backgroundColor = \"event-\";\n      event.color ? backgroundColor = backgroundColor + event.color : backgroundColor = backgroundColor + \"default\";\n      return {\n        className: backgroundColor\n      };\n    };\n\n    _this.state = {\n      events: events,\n      alert: null\n    };\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }\n      }, this.state.alert, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        className: \"ml-auto mr-auto\",\n        md: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: \"card-calendar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(BigCalendar, {\n        selectable: true,\n        localizer: localizer,\n        events: this.state.events,\n        defaultView: \"month\",\n        scrollToTime: new Date(1970, 1, 1, 6),\n        defaultDate: new Date(),\n        onSelectEvent: function onSelectEvent(event) {\n          return _this2.selectedEvent(event);\n        },\n        onSelectSlot: function onSelectSlot(slotInfo) {\n          return _this2.addNewEventAlert(slotInfo);\n        },\n        eventPropGetter: this.eventColors,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }\n      })))))));\n    }\n  }]);\n\n  return Calendar;\n}(React.Component);\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/davit/Desktop/AAA/Z-D/src/views/Calendar.js"],"names":["React","Calendar","BigCalendar","momentLocalizer","moment","SweetAlert","Card","CardBody","Row","Col","events","localizer","props","selectedEvent","event","alert","title","addNewEventAlert","slotInfo","setState","display","marginTop","e","addNewEvent","hideAlert","newEvents","state","push","start","end","eventColors","isSelected","backgroundColor","color","className","Date","Component"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Black Dashboard PRO React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/black-dashboard-pro-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n// react component used to create a calendar with events on it\nimport { Calendar as BigCalendar, momentLocalizer } from \"react-big-calendar\";\n// dependency plugin for react-big-calendar\nimport moment from \"moment\";\n// react component used to create alerts\nimport SweetAlert from \"react-bootstrap-sweetalert\";\n\n// reactstrap components\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\n\nimport { events } from \"variables/general.js\";\n\nconst localizer = momentLocalizer(moment);\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: events,\n      alert: null\n    };\n  }\n  selectedEvent = event => {\n    alert(event.title);\n  };\n  addNewEventAlert = slotInfo => {\n    this.setState({\n      alert: (\n        <SweetAlert\n          input\n          showCancel\n          style={{ display: \"block\", marginTop: \"-100px\" }}\n          title=\"Input something\"\n          onConfirm={e => this.addNewEvent(e, slotInfo)}\n          onCancel={() => this.hideAlert()}\n          confirmBtnBsStyle=\"info\"\n          cancelBtnBsStyle=\"danger\"\n        />\n      )\n    });\n  };\n  addNewEvent = (e, slotInfo) => {\n    var newEvents = this.state.events;\n    newEvents.push({\n      title: e,\n      start: slotInfo.start,\n      end: slotInfo.end\n    });\n    this.setState({\n      alert: null,\n      events: newEvents\n    });\n  };\n  hideAlert = () => {\n    this.setState({\n      alert: null\n    });\n  };\n  eventColors = (event, start, end, isSelected) => {\n    var backgroundColor = \"event-\";\n    event.color\n      ? (backgroundColor = backgroundColor + event.color)\n      : (backgroundColor = backgroundColor + \"default\");\n    return {\n      className: backgroundColor\n    };\n  };\n  render() {\n    return (\n      <>\n        <div className=\"content\">\n          {this.state.alert}\n          <Row>\n            <Col className=\"ml-auto mr-auto\" md=\"10\">\n              <Card className=\"card-calendar\">\n                <CardBody>\n                  <BigCalendar\n                    selectable\n                    localizer={localizer}\n                    events={this.state.events}\n                    defaultView=\"month\"\n                    scrollToTime={new Date(1970, 1, 1, 6)}\n                    defaultDate={new Date()}\n                    onSelectEvent={event => this.selectedEvent(event)}\n                    onSelectSlot={slotInfo => this.addNewEventAlert(slotInfo)}\n                    eventPropGetter={this.eventColors}\n                  />\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}