{"ast":null,"code":"import TypeChecker from './TypeChecker';\nexport var parseQuery = function parseQuery(queryString) {\n  var query = {};\n  if (!queryString) return query;\n  var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split('=');\n\n    if (query[decodeURIComponent(pair[0])]) {\n      if (Array.isArray(query[decodeURIComponent(pair[0])])) {\n        query[decodeURIComponent(pair[0])].push(decodeURIComponent(pair[1] || ''));\n      } else {\n        query[decodeURIComponent(pair[0])] = [query[decodeURIComponent(pair[0])], decodeURIComponent(pair[1] || '')];\n      }\n    } else {\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]) ? decodeURIComponent(pair[1]) : decodeURIComponent(pair[1] || '');\n    }\n  }\n\n  return query;\n};\nexport var combineQuery = function combineQuery(queries, n) {\n  if (typeof queries === 'string') {\n    return queries;\n  } else {\n    var query = '?';\n\n    var _loop = function _loop(key) {\n      if (key) {\n        if (Array.isArray(queries[key])) {\n          queries[key].forEach(function (val) {\n            query += \"\".concat(key, \"=\").concat(val, \"&\");\n          });\n        } else {\n          if (!TypeChecker.isUndefined(queries[key]) && !TypeChecker.isNull(queries[key]) && !TypeChecker.isEmptyString(queries[key])) {\n            query += \"\".concat(key, \"=\").concat(queries[key], \"&\");\n          }\n        }\n      }\n    };\n\n    for (var key in queries) {\n      _loop(key);\n    }\n\n    return query.slice(0, -1);\n  }\n};","map":{"version":3,"sources":["/Users/davit/Desktop/AAA/Z-D/src/core/queryHelper.js"],"names":["TypeChecker","parseQuery","queryString","query","pairs","substr","split","i","length","pair","decodeURIComponent","Array","isArray","push","combineQuery","queries","n","key","forEach","val","isUndefined","isNull","isEmptyString","slice"],"mappings":"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","sourcesContent":["import TypeChecker from './TypeChecker';\nexport const parseQuery = queryString => {\n    const query = {};\n    if (!queryString) return query;\n    const pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n    for (let i = 0; i < pairs.length; i++) {\n        const pair = pairs[i].split('=');\n        if (query[decodeURIComponent(pair[0])]) {\n            if (Array.isArray(query[decodeURIComponent(pair[0])])) {\n                query[decodeURIComponent(pair[0])].push(decodeURIComponent(pair[1] || ''))\n            } else {\n                query[decodeURIComponent(pair[0])] = [query[decodeURIComponent(pair[0])], decodeURIComponent(pair[1] || '')];\n            }\n        } else {\n            query[decodeURIComponent(pair[0])] = (decodeURIComponent(pair[1])) ? decodeURIComponent(pair[1]) : decodeURIComponent(pair[1] || '');\n        }\n    }\n    return query\n};\nexport const combineQuery = (queries, n) => {\n    if (typeof queries === 'string') {\n        return queries;\n    } else {\n        let query = '?';\n        for (let key in queries) {\n            if (key) {\n                if (Array.isArray(queries[key])) {\n                    queries[key].forEach(val => {\n                        query += `${key}=${val}&`\n                    })\n                } else {\n                    if(!TypeChecker.isUndefined(queries[key]) && !TypeChecker.isNull(queries[key]) && !TypeChecker.isEmptyString(queries[key])) {\n                        query += `${key}=${queries[key]}&`\n                    }\n                }\n            }\n        }\n        return query.slice(0, -1);\n    }\n};"]},"metadata":{},"sourceType":"module"}